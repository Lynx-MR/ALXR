name: Rust

on:
  push:
    branches: [master, alxr-workflows]
  pull_request:
    branches: [master, alxr-workflows]

env:
  CARGO_TERM_COLOR: always

jobs:
  build_windows:
    runs-on: windows-2019
    env:
      LIBCLANG_PATH: 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\Llvm\x64\bin'
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - uses: Swatinem/rust-cache@v1

      - name: Build crates
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: -p alvr_xtask -p alvr_server -p alvr_launcher --verbose

  build_linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - uses: Swatinem/rust-cache@v1

      - name: Build and install dependencies
        env:
          RUST_BACKTRACE: 1
        run: |
          sudo apt update
          sudo apt install build-essential pkg-config nasm libva-dev libdrm-dev libvulkan-dev libx264-dev libx265-dev cmake libasound2-dev libjack-jackd2-dev libgtk-3-dev libunwind-dev libffmpeg-nvenc-dev nvidia-cuda-toolkit
          cp packaging/deb/cuda.pc /usr/share/pkgconfig
          cargo xtask build-ffmpeg-linux
          cd deps/linux/FFmpeg-n4.4 && sudo make install && cd ../../..

      - name: Build crates
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: -p alvr_xtask -p alvr_launcher -p alvr_server -p alvr_vulkan-layer -p vrcompositor-wrapper --verbose
  
  build_alxr_linux:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - uses: Swatinem/rust-cache@v1

      - name: Build and install dependencies
        env:
          RUST_BACKTRACE: 1
        run: |
          sudo apt update
          # ALVR/FFMPEG specific depends.
          sudo apt install build-essential pkg-config nasm libva-dev libdrm-dev libvulkan-dev libx264-dev libx265-dev cmake libasound2-dev libjack-jackd2-dev libgtk-3-dev libunwind-dev libffmpeg-nvenc-dev nvidia-cuda-toolkit
          # ALXR specific depends.
          sudo apt install git ninja-build libxxf86vm-dev libxcb-glx0-dev libcjson-dev glslang-dev glslang-tools -y
          
          cp packaging/deb/cuda.pc /usr/share/pkgconfig
          cargo xtask build-ffmpeg-linux
          cd deps/linux/FFmpeg-n4.4 && sudo make install && cd ../../..

          # Fetch alxr-engine submodule.
          git submodule update --init --recursive
      
      - name: Build crates
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: -p alxr-client --verbose --features cuda-interop
  
  build_alxr_linux_portable:
    # ubuntu-20.04
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - uses: Swatinem/rust-cache@v1

      - name: Build and install dependencies
        env:
          RUST_BACKTRACE: 1
        run: |
          sudo apt update && sudo apt upgrade -y
          # ALVR/FFMPEG specific depends.
          sudo apt install build-essential pkg-config nasm libva-dev libdrm-dev libvulkan-dev libx264-dev libx265-dev cmake libasound2-dev libjack-jackd2-dev libgtk-3-dev libunwind-dev
          # ALXR specific depends.
          sudo apt install git wget gcc-10 g++-10 ninja-build libxxf86vm-dev libxcb-glx0-dev libcjson-dev glslang-dev glslang-tools -y

          # ubuntu-focal cmake package is too old.
          wget https://github.com/Kitware/CMake/releases/download/v3.23.1/cmake-3.23.1-linux-x86_64.sh
          chmod +x cmake-3.23.1-linux-x86_64.sh
          export PATH=${PWD}/cmake-3.23.1-linux-x86_64/bin:$PATH

          export CC=/usr/bin/gcc-10
          export CXX=/usr/bin/g++-10

          cargo xtask build-ffmpeg-linux-no-nvidia
          cd deps/linux/FFmpeg-n4.4 && sudo make install && cd ../../..

          # Fetch alxr-engine submodule.
          git submodule update --init --recursive
          
          echo "$PATH" >> $GITHUB_PATH
      - name: Build crates
        env:
          CC: /usr/bin/gcc-10
          CXX: /usr/bin/g++-10
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: -p alxr-client --verbose
  
  tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - uses: Swatinem/rust-cache@v1

      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: -p alvr_session --verbose

  rustfmt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  clippy:
    runs-on: windows-2019
    env:
      LIBCLANG_PATH: 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\Llvm\x64\bin'
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: clippy
      - uses: Swatinem/rust-cache@v1

      - uses: ErichDonGubler/clippy-check@fix-windows-lf-breaking-reports
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: -p alvr_xtask -p alvr_common -p alvr_server -p alvr_launcher
